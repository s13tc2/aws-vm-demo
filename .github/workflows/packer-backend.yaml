name: Packer-Backend
on:
  push:
    branches:
      - main
    paths:
      - 'src/packer/backend/**'
      - 'src/dotnet/backend/**'
env:
  DOTNET_VERSION: '6.0.401'
  PACKER_VERSION: '1.9.4'
  WORKING_DIRECTORY: "./src/packer/backend"
  DOTNET_WORKING_DIRECTORY: "./src/dotnet/backend/FleetAPI"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Install dependencies
        run: dotnet restore
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}
      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}
      - name: Publish
        run: |
          pwd
          ls
          dotnet publish ./FleetAPI.csproj -c Release -o ./publish
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}
      - name: Generate the Deployment Package
        run: |
          zip -r ../deployment.zip ./
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}/publish
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}
      - name: Upload Deployment Package
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-deployment
          path: ${{ env.DOTNET_WORKING_DIRECTORY }}/deployment.zip
      - name: List Artifacts
        run: |
          echo "Listing artifacts:"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" | jq '.artifacts[] | {name: .name, size: .size_in_bytes, expires_at: .expires_at}'

  packer:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: List Artifacts
        run: |
          echo "Listing artifacts:"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" | jq '.artifacts[] | {name: .name, size: .size_in_bytes, expires_at: .expires_at}'
      - uses: actions/download-artifact@v3
        with:
          name: dotnet-deployment
          path: ./deployment-package
      - name: List Downloaded Files
        run: ls -R ./deployment-package
      - name: Check Files
        run: |
          pwd
          ls -R ./deployment-package
      - id: image-version
        name: Generate Version Number
        run: |
          echo "version=$(date +'%Y.%m').${{ github.run_number }}" >> "$GITHUB_OUTPUT"
      - id: agent-ipaddress
        name: Check Path
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          ipaddress=$(curl -s http://checkip.amazonaws.com)
          echo $ipaddress
          echo "ipaddress=$ipaddress" >> "$GITHUB_OUTPUT"
      - name: Copy Deployment Package
        run: |
          cp ./deployment-package/deployment.zip ${{ env.WORKING_DIRECTORY }}/deployment.zip
      - name: Check Files
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          pwd
          ls
      - id: setup
        name: Setup `packer`
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PACKER_VERSION }}
      - id: build
        name: Packer Build
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PKR_VAR_image_version: ${{ steps.image-version.outputs.version }}
          PKR_VAR_agent_ipaddress: ${{ steps.agent-ipaddress.outputs.ipaddress }}
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          packer init ./
          packer build -var-file=variables.pkrvars.hcl ./